<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wzmtr.eam.mapper.statistic.RAMSMapper">
    <select id="query4AQYYZB" resultType="com.wzmtr.eam.dto.res.statistic.RAMSResDTO">
        SELECT
            (SELECT count(1)
             FROM T_FAULT_INFO d left join T_FAULT_ORDER df on d.FAULT_NO = df.FAULT_NO
             WHERE 1=1 and d.MAJOR_CODE='07' and nvl(df.IS_FAULT,'10')='10' and df.order_Status !='99' and d.FAULT_TYPE in('10','20')) as "faultNum",
            (SELECT count(1)
             FROM T_FAULT_INFO d left join T_FAULT_ORDER df on d.FAULT_NO = df.FAULT_NO
             WHERE 1=1 and d.MAJOR_CODE='07' and nvl(df.IS_FAULT,'10')='10' and df.order_Status !='99'and d.EXT3 in ('02','03','04')) as "affect11",
            (SELECT count(1)
             FROM T_FAULT_INFO d left join T_FAULT_ORDER df on d.FAULT_NO = df.FAULT_NO
             WHERE 1=1 and d.MAJOR_CODE='07' and nvl(df.IS_FAULT,'10')='10' and df.order_Status !='99'and d.EXT3 in ('05','06','08','09')) as "affect21",
            round( (select sum(a.TOTAL_MILES) from T_EQUIPMENT a where a.MAJOR_CODE='07')/1000000,2)  as "millionMiles"
        from dual
    </select>
    <select id="queryFautTypeByMonthBySys" resultType="com.wzmtr.eam.dto.res.statistic.SystemFaultsResDTO">
    SELECT
            c.YEAR_MONTH AS "yearMonth",
            (
            SELECT COUNT(1)
            FROM T_FAULT_INFO d, T_FAULT_ORDER df
            WHERE d.FAULT_NO = df.FAULT_NO
            AND SUBSTR(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
            AND NVL(df.IS_FAULT, '10') = '10'
            AND d.MAJOR_CODE = '07'
            AND df.ORDER_STATUS != '99'
            AND SUBSTR(d.FAULT_MODULE_ID, 4, 2) IN
            <foreach item="moduleId" collection="moduleIds" open="(" close=")" separator=",">
                 #{moduleId}
            </foreach>
            AND d.FAULT_TYPE = '10'
            ) AS "zx",
            (
            SELECT COUNT(1)
            FROM T_FAULT_INFO d, T_FAULT_ORDER df
            WHERE d.FAULT_NO = df.FAULT_NO
            AND SUBSTR(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
            AND NVL(df.IS_FAULT, '10') = '10'
            AND d.MAJOR_CODE = '07'
            AND df.ORDER_STATUS != '99'
            AND SUBSTR(d.FAULT_MODULE_ID, 4, 2) IN
            <foreach item="moduleId" collection="moduleIds" open="(" close=")" separator=",">
                #{moduleId}
            </foreach>
            AND d.FAULT_TYPE = '20'
            ) AS "crk",
            (
            SELECT COUNT(1)
            FROM T_FAULT_INFO d, T_FAULT_ORDER df
            WHERE d.FAULT_NO = df.FAULT_NO
            AND SUBSTR(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
            AND NVL(df.IS_FAULT, '10') = '10'
            AND d.MAJOR_CODE = '07'
            AND df.ORDER_STATUS != '99'
            AND SUBSTR(d.FAULT_MODULE_ID, 4, 2) IN
            <foreach item="moduleId" collection="moduleIds" open="(" close=")" separator=",">
                 #{moduleId}
            </foreach>
            AND d.FAULT_TYPE = '30'
            ) AS "yf",
            (
            SELECT COUNT(1)
            FROM T_FAULT_INFO d, T_FAULT_ORDER df
            WHERE d.FAULT_NO = df.FAULT_NO
            AND SUBSTR(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
            AND NVL(df.IS_FAULT, '10') = '10'
            AND d.MAJOR_CODE = '07'
            AND df.ORDER_STATUS != '99'
            AND SUBSTR(d.FAULT_MODULE_ID, 4, 2) IN
            <foreach item="moduleId" collection="moduleIds" open="(" close=")" separator=",">
                #{moduleId}
            </foreach>
            ) AS "sum",
            (
            SELECT COUNT(1)
            FROM T_FAULT_INFO d, T_FAULT_ORDER df
            WHERE d.FAULT_NO = df.FAULT_NO
            AND SUBSTR(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
            AND NVL(df.IS_FAULT, '10') = '10'
            AND d.MAJOR_CODE = '07'
            AND df.ORDER_STATUS != '99'
            AND SUBSTR(d.FAULT_MODULE_ID, 4, 2) IN
            <foreach item="moduleId" collection="moduleIds" open="(" close=")" separator=",">
                #{moduleId}
            </foreach>
            AND d.FAULT_TYPE IN ('10', '20')
            ) AS "noyfsum",
            (
            SELECT SUM(a.MILES_INCREMENT)
            FROM T_TRAIN_MILEAGE a
            WHERE SUBSTR(a.FILLIN_TIME, 1, 7) = c.YEAR_MONTH
            ) AS "miles"
            FROM T_FAULT_INFO t,
            (
            SELECT TO_CHAR(ADD_MONTHS(TO_DATE(#{startDate}, 'YYYY-MM'), ROWNUM - 1), 'YYYY-MM') AS YEAR_MONTH
            FROM DUAL
            CONNECT BY ROWNUM <![CDATA[<=]]> MONTHS_BETWEEN(TO_DATE(#{endDate}, 'YYYY-MM'), TO_DATE(#{startDate}, 'YYYY-MM')) + 1
            ) c
            WHERE (SUBSTR(t.DISCOVERY_TIME, 1, 7) >= #{startDate}) AND (SUBSTR(t.DISCOVERY_TIME, 1, 7) <![CDATA[<=]]> #{endDate})
            OR (SUBSTR(t.DISCOVERY_TIME, 1, 7) >= #{startDate}) AND (SUBSTR(t.DISCOVERY_TIME, 1, 7) <![CDATA[<=]]> #{endDate})
            GROUP BY c.YEAR_MONTH
            ORDER BY c.YEAR_MONTH DESC
    </select>
    <select id="queryresult2" resultType="com.wzmtr.eam.dto.res.statistic.RAMSResDTO">
        select c.YEAR_MONTH                                       as "yearMonth",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99'
                  and d.EXT3 in ('05', '06', '08', '09'))         as "noService",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99'
                  and d.EXT3 = '02')                              as "late3",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99'
                  and d.EXT3 = '03')                              as "late5to15",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99'
                  and d.EXT3 = '04')                              as "late15",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99'
                  and d.EXT3 in ('02', '03', '04'))               as "late",
               (select count(1)
                from T_FAULT_INFO d,
                     T_FAULT_ORDER df
                where d.FAULT_NO = df.FAULT_NO
                  and substr(DISCOVERY_TIME, 1, 7) = c.YEAR_MONTH
                  and nvl(df.IS_FAULT, '10') = '10'
                  and d.MAJOR_CODE = '07'
                  and df.order_Status != '99')                    as "sum",
               (select sum(a.MILES_INCREMENT)
                from T_TRAIN_MILEAGE a
                where substr(a.FILLIN_TIME, 1, 7) = c.YEAR_MONTH) as "miles"
        from T_FAULT_INFO t,
             (select to_char(add_months(to_date(#{startDate}, 'YYYY-MM'), rownum - 1), 'YYYY-MM') AS YEAR_MONTH
              from dual
                  connect by rownum <![CDATA[<=]]> months_between(to_date(#{endDate}, 'YYYY-MM'), to_date(#{startDate}, 'YYYY-MM'))+1) c
        where (substr(t.DISCOVERY_TIME, 1, 7) >= #{startDate}) and (substr(t.DISCOVERY_TIME, 1, 7) <![CDATA[<=]]> #{endDate})
           or (substr(t.DISCOVERY_TIME, 1, 7) >= #{startDate}) and (substr(t.DISCOVERY_TIME, 1, 7) <![CDATA[<=]]> #{endDate})
        group by c.YEAR_MONTH
        ORDER by c.YEAR_MONTH desc
    </select>
</mapper>